siqqel is a simple and lightweight framework which allows you to execute SQL queries directly from your browser (by transforming them into AJAX calls to a backend script), and let's you display the results of your queries within the structure of the calling HTML document. siqqel was created by Max Winde (http://github.com/343max).

To issue a query and have its results displayed in a table of your HTML document, you simply put an SQL statement into the "sql" attribute of a table and it will be executed when you open the HTML document in your browser: <table sql="SELECT name FROM user"></table>

Your browser will wrap the SQL statement into an AJAX call, this call will be issued to a backend script on your server, which in turn issues the statement against your database server, and returns the result set back to your browser. Your browser will display the result set in the according table. If you hover your mouse over the table, a "reload" icon will be displayed, allowing you to re-issue the SQL statement without the need to reload the whole page.



 Your browser, having
 loaded a local ("file:///...")
 html document which references              The siqqel PHP library
 the siqqel js file on your server           on your web server,
 and containing an HTML table element        receiving your query and
 with an "sql" attribute featuring a         creating a MySQL call
 SQL statement                               from it

 |=======================|                   |-----------------------|                  |----------|
 |_______________________| - JSON Request -> |                       | -- SQL Query --> |          |
 |                       |                   |                       |                  |          |
 | <table sql="          |                   | $result=              |                  | MySQL DB |
 | SELECT name FROM user |                   | mysqli_query(         |                  |          |
 | "/>                   |                   | SELECT name FROM user)|                  |          |
 |_______________________|                   |_______________________|                  |__________|
                                                                                             |
                                                                                             |
 |=======================|                   |-----------------------|                       |
 |_______________________|                   |                       |                       |
 | name                  |                   |                       |                       |
 | ---------             |                   |                       |                       |
 | Han Solo              |                   | json_encode($result); |                       |
 | Chewbacca             | <- JSON Result -- |                       | <-- SQL Result -------/               
 |_______________________|                   |_______________________|                 
 
 Your browser, after decoding                The siqqel PHP library,
 the JSON response an rendering              transforming the MySQL
 the result data into the table              result into a JSON response
 
 

To see it in action do the following:

* Create your config.inc.php from config.inc.sample.php

* Put the whole siqqel folder onto a PHP enabled webserver
  (e.g. "http://myserver.com/siqqel/")

* Copy example.html wherever you like (e.g. you desktop)

* Replace the example url to siqqel.js.php with the url where you put the siqqel folder
  (e.g. src="http://myserver.com/siqqel/siqqel.js.php")

* Put your own queries into example.html

* Open your local version of example.html with your favourite browser


You may also pass parameters form the URL to your sql-Query, by creating an "hashParam".

You do this like this: SELECT #myParam;
then put this param into the URL like this: http://localhost/myQuery.php#myParam:1

Your param will be escaped but not quoted in any way, so this example is prone to SQL injections.

To prevent raw SQL queries from floating over HTTP you may plug in your own SQL-encryption. Until then you should not run this tool on an unsecured webserver and not give access to someone you wouldn't give your mySQL password.

Events:

when loaded, each table, row and cell send a "loaded" event, so you can easly manipulate everything for your purpose
$('td.userId').live('loaded', function(userId) {
	// do something useful.
});

The events are:
"loaded" for a cell
"rowLoaded" for a row
"tableLoaded" for the whole table.

Every cell gets two css classes: the name of the column and the type (eg: userId TYPE_LONG) so you can format it using css and manipulate it via jQuery

every row gets a class "row" and a class "row" + rowNumber so $('#myQuery tr.row1') will match the 1 row of your resultset.

Simple bargraphs:
You can put an simple bargraph into the background of an table by adding an "graph" attribute to your table. The "graph" attribute should contain the name of the column you want to the grpah for eg.:

<table sql="SELECT contibuterName, COUNT(*) AS countOfCommits FROM commits GROUP BY(contributorName)" graph="countOfCommits"></table>
